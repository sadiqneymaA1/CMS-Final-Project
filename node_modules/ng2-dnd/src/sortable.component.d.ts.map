{"version":3,"file":"sortable.component.d.ts","sources":["sortable.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef } from '@angular/core';\nimport { EventEmitter, ElementRef } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { AbstractComponent, AbstractHandleComponent } from './abstract.component';\nimport { DragDropConfig } from './dnd.config';\nimport { DragDropService, DragDropSortableService } from './dnd.service';\nexport declare class SortableContainer extends AbstractComponent {\n    private _sortableDataService;\n    draggable: boolean;\n    private _sortableData;\n    private sortableHandler;\n    sortableData: Array<any> | FormArray;\n    dropzones: Array<string>;\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config: DragDropConfig, cdr: ChangeDetectorRef, _sortableDataService: DragDropSortableService);\n    _onDragEnterCallback(event: Event): void;\n    getItemAt(index: number): any;\n    indexOf(item: any): number;\n    removeItemAt(index: number): void;\n    insertItemAt(item: any, index: number): void;\n}\nexport declare class SortableComponent extends AbstractComponent {\n    private _sortableContainer;\n    private _sortableDataService;\n    index: number;\n    draggable: boolean;\n    droppable: boolean;\n    /**\n     * The data that has to be dragged. It can be any JS object\n     */\n    dragData: any;\n    /**\n     * Drag allowed effect\n     */\n    effectallowed: string;\n    /**\n     * Drag effect cursor\n     */\n    effectcursor: string;\n    /**\n     * Callback function called when the drag action ends with a valid drop action.\n     * It is activated after the on-drop-success callback\n     */\n    onDragSuccessCallback: EventEmitter<any>;\n    onDragStartCallback: EventEmitter<any>;\n    onDragOverCallback: EventEmitter<any>;\n    onDragEndCallback: EventEmitter<any>;\n    onDropSuccessCallback: EventEmitter<any>;\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config: DragDropConfig, _sortableContainer: SortableContainer, _sortableDataService: DragDropSortableService, cdr: ChangeDetectorRef);\n    _onDragStartCallback(event: Event): void;\n    _onDragOverCallback(event: Event): void;\n    _onDragEndCallback(event: Event): void;\n    _onDragEnterCallback(event: Event): void;\n    _onDropCallback(event: Event): void;\n}\nexport declare class SortableHandleComponent extends AbstractHandleComponent {\n    constructor(elemRef: ElementRef, dragDropService: DragDropService, config: DragDropConfig, _Component: SortableComponent, cdr: ChangeDetectorRef);\n}\n"]}