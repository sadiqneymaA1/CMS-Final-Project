{"version":3,"file":"abstract.component.d.ts","sources":["abstract.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { DragDropConfig, DragImage } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nexport declare abstract class AbstractComponent {\n    _dragDropService: DragDropService;\n    _config: DragDropConfig;\n    private _cdr;\n    _elem: HTMLElement;\n    _dragHandle: HTMLElement;\n    _dragHelper: HTMLElement;\n    _defaultCursor: string;\n    /**\n     * Last element that was mousedown'ed\n     */\n    _target: EventTarget;\n    /**\n     * Whether the object is draggable. Default is true.\n     */\n    private _dragEnabled;\n    dragEnabled: boolean;\n    /**\n     * Allows drop on this element\n     */\n    dropEnabled: boolean;\n    /**\n     * Drag effect\n     */\n    effectAllowed: string;\n    /**\n     * Drag cursor\n     */\n    effectCursor: string;\n    /**\n     * Restrict places where a draggable element can be dropped. Either one of\n     * these two mechanisms can be used:\n     *\n     * - dropZones: an array of strings that permits to specify the drop zones\n     *   associated with this component. By default, if the drop-zones attribute\n     *   is not specified, the droppable component accepts drop operations by\n     *   all the draggable components that do not specify the allowed-drop-zones\n     *\n     * - allowDrop: a boolean function for droppable components, that is checked\n     *   when an item is dragged. The function is passed the dragData of this\n     *   item.\n     *   - if it returns true, the item can be dropped in this component\n     *   - if it returns false, the item cannot be dropped here\n     */\n    allowDrop: (dropData: any) => boolean;\n    dropZones: string[];\n    /**\n     * Here is the property dragImage you can use:\n     * - The string value as url to the image\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"/images/simpler.png\">\n     * ...\n     * - The DragImage value with Image and optional offset by x and y:\n     *   let myDragImage: DragImage = new DragImage(\"/images/simpler1.png\", 0, 0);\n     * ...\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"myDragImage\">\n     * ...\n     * - The custom function to return the value of dragImage programmatically:\n     *   <div class=\"panel panel-default\"\n     *        dnd-draggable [dragEnabled]=\"true\"\n     *        [dragImage]=\"getDragImage(someData)\">\n     * ...\n     *   getDragImage(value:any): string {\n     *     return value ? \"/images/simpler1.png\" : \"/images/simpler2.png\"\n     *   }\n     */\n    dragImage: string | DragImage | Function;\n    cloneItem: boolean;\n    constructor(elemRef: ElementRef, _dragDropService: DragDropService, _config: DragDropConfig, _cdr: ChangeDetectorRef);\n    setDragHandle(elem: HTMLElement): void;\n    /******* Change detection ******/\n    detectChanges(): void;\n    private _onDragEnter(event);\n    private _onDragOver(event);\n    private _onDragLeave(event);\n    private _onDrop(event);\n    private _isDropAllowed(event);\n    private _preventAndStop(event);\n    private _onDragStart(event);\n    private _onDragEnd(event);\n    _onDragEnterCallback(event: Event): void;\n    _onDragOverCallback(event: Event): void;\n    _onDragLeaveCallback(event: Event): void;\n    _onDropCallback(event: Event): void;\n    _onDragStartCallback(event: Event): void;\n    _onDragEndCallback(event: Event): void;\n}\nexport declare class AbstractHandleComponent {\n    _dragDropService: DragDropService;\n    _config: DragDropConfig;\n    private _Component;\n    private _cdr;\n    _elem: HTMLElement;\n    constructor(elemRef: ElementRef, _dragDropService: DragDropService, _config: DragDropConfig, _Component: AbstractComponent, _cdr: ChangeDetectorRef);\n}\n"]}